@page "/TiposUtileria"
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@inject ITipoUtileriaRepositorio TipoUtileriaRepositorio
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

@inject DialogService DialogService
@attribute [Authorize(Roles = "Almacenes,Admin")]

<RadzenCard>
    <PageTitle>Tipos de Utileria</PageTitle>

    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <h3>Tipos de Utileria</h3>
        <RadzenButton Variant="Variant.Outlined" class="rz-info" ButtonType="ButtonType.Button" Size="ButtonSize.Medium"
                      Icon="add" Text="Crear" Click='() => { NavigationManager.NavigateTo("/TiposUtileria/Crear"); }'/>
    </RadzenRow>
    <br/>
    <RadzenDataGrid TItem="TipoUtileria" AllowPaging="true" PageSize="10" Data="@_tiposUtileria">
        <Columns>
            <RadzenDataGridColumn TItem="TipoUtileria" Property="Id" Title="ID"/>
            <RadzenDataGridColumn TItem="TipoUtileria" Property="Descripcion" Title="Nombre"/>
            <RadzenDataGridColumn TItem="TipoUtileria" Title="Opciones">
                <Template Context="tipoUtileria">
                    <RadzenButton Variant="Variant.Outlined" class="rz-info" ButtonType="ButtonType.Button" Icon="edit"
                                  Click='() => { NavigationManager.NavigateTo($"/TiposUtileria/editar/{tipoUtileria.Id}"); }'
                                  Text="Editar"/>
                    <RadzenButton Variant="Variant.Outlined" class="rz-danger" ButtonType="ButtonType.Button" Icon="delete"
                                  Click=@(args => DialogService.Confirm("EstÃ¡ seguro que quiere eliminar este tipo? Esta accion no es reversible", "Eliminar Tipo", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" })
                                            .ContinueWith(async task =>
                                            {
                                                if (task.Result == true)
                                                {
                                                    await Delete(tipoUtileria.Id);
                                                }
                                            }))
                                  Text="Eliminar"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {

    List<TipoUtileria>? _tiposUtileria;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData()
    {
        try
        {
            _tiposUtileria = await TipoUtileriaRepositorio.Get();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task Delete(int id)
    {
        await TipoUtileriaRepositorio.CambiaEstado(id, false);
        await GetData();
    }

}