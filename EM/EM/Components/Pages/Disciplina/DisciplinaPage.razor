@page "/Disciplina"
@attribute [StreamRendering]
@inject IDiciplinaRepositorio DiciplinaRepositorio
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@attribute [Authorize(Roles = "Usuario,Admin")]

<PageTitle>Disciplinas</PageTitle>

<RadzenCard>

    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <h3>Disciplinas</h3>
        <RadzenButton Variant="Variant.Outlined" class="rz-info" ButtonType="ButtonType.Button" Size="ButtonSize.Medium"
                      Icon="add" Text="Crear" Click='() => { NavigationManager.NavigateTo("/Disciplina/Crear"); }'/>
    </RadzenRow>
    <br/>
    <RadzenDataGrid TItem="Disciplinas" AllowPaging="true" PageSize="10" Data="@_diciplinas">
        <Columns>
            <RadzenDataGridColumn TItem="Disciplinas" Property="Id" Title="ID"/>
            <RadzenDataGridColumn TItem="Disciplinas" Property="Descripcion" Title="Nombre"/>
            <RadzenDataGridColumn TItem="Disciplinas" Property="MontoMensualidad" Title="Valor de Membresia"/>
            <RadzenDataGridColumn TItem="Disciplinas" Title="Opciones">
                <Template Context="diciplina">
                    <RadzenButton Variant="Variant.Outlined" class="rz-info" ButtonType="ButtonType.Button" Icon="edit"
                                  Click='() => { NavigationManager.NavigateTo($"/Disciplina/editar/{diciplina.Id}"); }'
                                  Text="Editar"/>
                    <RadzenButton Variant="Variant.Outlined" class="@(diciplina.Enable ? "rz-danger" : "rz-success")" ButtonType="ButtonType.Button" Icon="@(diciplina.Enable ? "block" : "check_circle")"
                                              Click=@(args => DialogService.Confirm(
                                                  diciplina.Enable ? "¿Está seguro que quiere deshabilitar esta disciplina? Esta acción no es reversible" : "¿Está seguro que quiere habilitar esta disciplina?",
                                                  diciplina.Enable ? "Deshabilitar Disciplina" : "Habilitar Disciplina",
                                                  new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" })
                                                  .ContinueWith(async task =>
                                                  {
                                                      if (task.Result == true)
                                                      {
                                                          await Delete(diciplina.Id, !diciplina.Enable);
                                                      }
                                                  }))
                                              Text="@(diciplina.Enable ? "Deshabilitar" : "Habilitar")"/>
                    
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {

    List<Disciplinas> _diciplinas;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData()
    {
        _diciplinas = await DiciplinaRepositorio.Get();
    }

    private async Task Delete(int id, bool enable)
    {
        try
        {
            await DiciplinaRepositorio.CambiaEstado(id, enable);
            await GetData();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}