@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<RadzenComponents @rendermode="InteractiveServer" />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="5">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5">
                    <RadzenSidebarToggle Click="@(() => _sidebar1Expanded = !_sidebar1Expanded)"/>
                    <RadzenLabel Text="Academia Deportiva EM"/>
                </RadzenStack>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenAppearanceToggle/>
                <RadzenProfileMenu>
                    <Template>
                        <RadzenGravatar Email="@HttpContext?.User.Identity?.Name" Size="32">
                        </RadzenGravatar>
                    </Template>
                    <ChildContent>
                        <div class="nav-item px-3">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                                <button type="submit" class="nav-link">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                                </button>
                            </form>
                        </div>
                    </ChildContent>
                </RadzenProfileMenu>
            </RadzenRow>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_sidebar1Expanded" Responsive="true">
        <RadzenPanelMenu
            DisplayStyle="@(_sidebar1Expanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)"
            ShowArrow="true">
            <RadzenPanelMenuItem Text="Inicio" Icon="home" Click='() => NavigationManager.NavigateTo("/")' />
            <RadzenPanelMenuItem Text="Disciplinas" Icon="pool"
                                 Click='() => NavigationManager.NavigateTo("/Disciplina")'/>
            <RadzenPanelMenuItem Text="Atletas" Icon="sports_martial_arts"
                                 Click='() => NavigationManager.NavigateTo("/Atletas")'/>

            <RadzenPanelMenuItem Text="Inventario" Icon="assignment">
                <RadzenPanelMenuItem Text="Utilerias" Icon="sports_baseball"
                                     Click='() => NavigationManager.NavigateTo("/Utilerias")'/>
                <RadzenPanelMenuItem Text="Marcas" Icon="branding_watermark"
                                     Click='() => NavigationManager.NavigateTo("/Marcas")'/>
                <RadzenPanelMenuItem Text="Tipos de Utilerias" Icon="bookmark"
                                     Click='() => NavigationManager.NavigateTo("/TiposUtileria")'/>
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="Seguridad" Icon="lock">
                <RadzenPanelMenuItem Text="Usuarios" Icon="group"
                                     Click='() => NavigationManager.NavigateTo("/Users")'/>
            </RadzenPanelMenuItem>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        <RadzenStack AlignItems="AlignItems.Center">
            Power By Radzen Blazor Components | Copyright © @DateTime.Now.Year All rights reserved.
        </RadzenStack>
    </RadzenFooter>
</RadzenLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    bool _sidebar1Expanded = true;
    
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [Inject] private ThemeService? ThemeService { get; set; }
    string _currentUrl = "";

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        if (HttpContext != null)
        {
            var theme = HttpContext.Request.Cookies["theme"];

            if (!string.IsNullOrEmpty(theme))
            {
                ThemeService?.SetTheme(theme, false);
            }
        }
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
}
